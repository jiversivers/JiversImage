function ijRowByRowStitching(tileDir, inputPattern, gridData, outDir)

% This function perfoms row-by-row stitching (default in PV is right and
% down, so we use that here). The input pattern input tells the stitcher
% what to search for. The names should all be identitcal except for the
% cycle number, so an input pattern may look like this:
% 'TSeries_755_Cycle{iiiii}.tiff'. Where the bracket "i" tells the stitcher
% where to iterate in the name and how many digits (leading zeros will be
% added to fulfill this). The atlas grid information must be input as an
% array with the number of columns (X), number of rows (Y), and percent
% overlap (OL) [X Y OL]. outDir is used to save the stiched output save
% directory.


opts = "type=[Grid: row-by-row] " + ...
        "order=[Right & Down                ] " + " " + ...
        "grid_size_x=" + num2str(gridData(1)) + " " + ...
        "grid_size_y=" + num2str(gridData(2)) + " " + ...
        "tile_overlap=" + num2str(gridData(3)) + " " + ...
        "first_file_index_i=1 " + ...
        "directory=[" + tileDir + "] " + ...
        "file_names=" + inputPattern + " " + ...
        "output_textfile_name=TileConfiguration.txt " + ...
        "fusion_method=[Linear Blending] " + ...
        "regression_threshold=0.05 " + ...
        "max/avg_displacement_threshold=2.50 " + ...
        "absolute_displacement_threshold=3.50 " + ...
        "compute_overlap " + ...
        "computation_parameters=[Save computation time (but use more RAM)] " + ...
        "image_output=[Write to disk] " + ...
        "output_directory=[" + outDir + "]";

ij.IJ.run("Grid/Collection stitching", opts);